{"version":3,"sources":["ui/App.js","ui/InputResult.js","libs/utils.js","serviceWorker.js","index.js"],"names":["intervalID","InputResult","_ref","expectedResult","_useState","useState","_useState2","Object","slicedToArray","isResultVisible","setResultVisibility","_useState3","_useState4","value","setValue","color","react_default","a","createElement","Fragment","data-testid","type","placeholder","maxLength","onChange","_ref2","target","length","style","fillData","rowsNumber","arguments","undefined","result","Array","fill","map","row","index","Math","random","increment","split","number","join","App","setRows","values","setValues","_useState5","_useState6","visible","setVisibility","_useState7","_useState8","timer","setTimer","resultArea","i","push","key","concat","ui_InputResult","useEffect","clearTimeout","setTimeout","className","Boolean","window","location","hostname","match","ReactDOM","render","ui_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9aa59028.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nimport InputResult from './InputResult'\nimport { fillData, increment } from '../libs/utils'\n\nlet intervalID\nfunction App() {\n  const [rowsNumber, setRows] = useState(3)\n  const [values, setValues] = useState(fillData(rowsNumber))\n  const [visible, setVisibility] = useState(true)\n  const [timer, setTimer] = useState(3)\n\n  let resultArea = []\n  if (!visible) {\n    for (let i = 0; i < rowsNumber; i++) {\n      resultArea.push(\n        <div key={`result-${i}`}>\n          <InputResult expectedResult={+increment(values[i])} />\n        </div>\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (intervalID) {\n      setVisibility(true)\n      setValues(fillData(rowsNumber))\n      clearTimeout(intervalID)\n    }\n\n    intervalID = setTimeout(() => {\n      setVisibility(false)\n    }, timer * 1000)\n  }, [timer, rowsNumber])\n\n  return (\n    <div className=\"pa3 ma3 center bg-white shadow-2 w-50 App\">\n      <label>\n        Rows :\n        <input\n          value={rowsNumber}\n          type=\"number\"\n          onChange={({ target }) => {\n            if (target.value > 0) setRows(+target.value)\n          }}\n        />\n      </label>\n      <label>\n        Interval :\n        <input\n          value={timer}\n          type=\"number\"\n          onChange={({ target }) => {\n            if (target.value > 0) setTimer(+target.value)\n          }}\n        />\n      </label>\n      {visible && (\n        <ul className=\"list\">\n          {values &&\n            values.map((result, index) => <li key={index}>{result}</li>)}\n        </ul>\n      )}\n      {resultArea}\n    </div>\n  )\n}\n\nexport default App\n","import React, { useState } from 'react'\n\nexport const InputResult = ({ expectedResult }) => {\n  const [isResultVisible, setResultVisibility] = useState(false)\n  const [value, setValue] = useState('')\n\n  const onResultChange = ({ target }) => {\n    setValue(+target.value)\n    if (target.value.length === 4) {\n      setResultVisibility(true)\n    }\n  }\n\n  const isCorrect = expectedResult === value\n  const color = isCorrect ? 'green' : 'red'\n  return (\n    <>\n      <input\n        data-testid=\"input-result\"\n        type=\"number\"\n        placeholder=\"Valeur\"\n        maxLength={4}\n        value={value}\n        onChange={onResultChange}\n      />\n      {isResultVisible && (\n        <p data-testid=\"input-solution\" style={{ color }}>\n          {expectedResult}\n        </p>\n      )}\n    </>\n  )\n}\n\nexport default InputResult\n","export const fillData = (rowsNumber = 4) => {\n  const result = new Array(rowsNumber)\n  result.fill('')\n  return result.map(row => {\n    for (let index = 0; index < 4; index++) {\n      row += (Math.random() * 10) | 0\n    }\n    return row\n  })\n}\n\nexport const increment = value =>\n  value\n    .split('')\n    .map(number => (+number === 9 ? 0 : +number + 1))\n    .join('')\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './ui/App'\nimport * as serviceWorker from './serviceWorker'\nimport 'tachyons'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}